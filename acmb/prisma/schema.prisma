// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String        @id @default(uuid())
  email                String        @unique
  password             String
  name                 String
  role                 UserRole      @default(STUDENT)
  phone                String?       @unique
  status               AccountStatus @default(ACTIVE)
  profile              Profile?
  likes                Like[]
  followers            Follow[]      @relation("followers")
  following            Follow[]      @relation("following")
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  isVerified           Boolean       @default(false)
  resetToken           String?
  interactions         Interaction[] 
  resetTokenExpiresAt  DateTime?
  verifyToken          String
  verifyTokenExpiresAt DateTime?
  lastLogin            DateTime?  
  isDeleted            Boolean       @default(false)
  deletedAt            DateTime?

  // Relations
  posts                Post[]
  requests             Request[]
  comments             Comment[]
  commentLikes         CommentLike[] 
  reportedFlags PostFlag[]
  profileViewsMade     ProfileView[] @relation("Viewer")
  profileViewsReceived ProfileView[] @relation("Viewed")
  participants ConversationParticipant[]
  messages     ConversationMessage[]

  // flag relations
  resourceFlagsReported AcademicResourceFlag[] @relation("AcademicResourceFlagsReported")
  resourceFlagsReviewed AcademicResourceFlag[] @relation("AcademicResourceFlagsReviewed")

  groupsCreated   Group[]        @relation("GroupCreator")
  groupMemberships GroupMember[]
  groupMessages   GroupMessage[]
  groupResources  GroupResource[]

  activityLogs ResourceActivityLog[]
  //Add opposite relations
  userSuspensions      UserSuspension[] @relation("UserSuspensions")
  adminSuspensions     UserSuspension[] @relation("AdminSuspensions")
  restoredSuspensions  UserSuspension[] @relation("UserSuspensionRestorer")
}

model Profile {
  id            String   @id @default(uuid())
  name          String
  institution   String
  academicLevel String
  skills        String[]
  bio           String?
  profileImage  String?
  coverPhoto    String?
  course       String? 
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  postLikes Like[]
  interests     String[]
  academicResources AcademicResource[]
  // Relation to User
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  // indexes
  @@index([skills], type: Gin)
  @@index([interests], type: Gin)
  @@index([institution])
  @@index([course])
  @@index([academicLevel])
}

model UserSuspension {
  id         String   @id @default(uuid())
  userId     String
  adminId    String
  reason     String?
  createdAt  DateTime @default(now())
  restoredAt DateTime?

  user       User @relation("UserSuspensions", fields: [userId], references: [id])
  admin      User @relation("AdminSuspensions", fields: [adminId], references: [id])

  restoredBy String?
  restoredByUser User? @relation("UserSuspensionRestorer", fields: [restoredBy], references: [id])
}



model Follow {
  id          String @id @default(uuid())
  followerId  String
  followingId String

  follower  User @relation("following", fields: [followerId], references: [id])
  following User @relation("followers", fields: [followingId], references: [id])
}

model ProfileView {
  id  String  @id @default(uuid())
  viewerId  String
  viewedId  String
  createdAt DateTime @default(now())

  viewer  User  @relation("Viewer", fields: [viewerId], references: [id])
  viewed  User  @relation("Viewed", fields: [viewedId], references: [id])
}

model Post {
  id            String       @id @default(uuid())
  title         String
  body          String?
  fileUrl       String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // NEW: engagement counters (denormalized for speed)
  likesCount    Int          @default(0)
  commentsCount Int          @default(0)

  likes         Like[]
  interactions  Interaction[]
  type          PostType     @default(GENERAL)
  comments      Comment[]
  flags      PostFlag[]
  isDeleted   Boolean  @default(false)
  deletedAt   DateTime?

  tags          PostTag[]
  authorId      String
  author        User         @relation(fields: [authorId], references: [id])

  // Helpful indexes for feed/dashboards
  @@index([createdAt], name: "idx_post_createdAt")
  @@index([authorId, createdAt], name: "idx_post_author_createdAt")
  @@index([isDeleted, createdAt], name: "idx_post_isDeleted_createdAt")
}


model Like {
  id  String @id @default(uuid())
  userId  String
  postId  String
  profileId   String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])
  profile Profile? @relation(fields: [profileId], references: [id])

  deleted   Boolean  @default(false)
  @@unique([userId, postId]) // prevent duplicate likes
}


model Comment {
  id        String   @id @default(uuid())
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String
  user   User   @relation(fields: [userId], references: [id])
  postId  String?
  post   Post?   @relation(fields: [postId], references: [id])

  deleted   Boolean  @default(false)
  likes      CommentLike[] 
  parentId  String?
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")

}

model PostFlag {
  id         String   @id @default(cuid())
  post       Post     @relation(fields: [postId], references: [id])
  postId     String
  reporter   User     @relation(fields: [reporterId], references: [id])
  reporterId String
  reason     String
  status     FlagStatus @default(PENDING) // PENDING, REVIEWED, RESOLVED
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([postId])
  @@index([reporterId])
}

model Request {
  id          String        @id @default(uuid())
  title       String
  description String
  status      RequestStatus
  createdAt   DateTime      @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Interaction {
  id          String @id @default(uuid())
  userId      String
  postId      String
  type        interactionType
  createdAt   DateTime @default(now())

  user        User  @relation(fields: [userId], references: [id])
  post        Post  @relation(fields: [postId], references: [id])
}

model CommentLike {
  id          String @id @default(uuid())
  userId      String
  commentId   String
  createdAt   DateTime @default(now())
  
  user        User    @relation(fields: [userId], references: [id])
  comment     Comment @relation(fields: [commentId], references: [id])
  @@unique([userId, commentId]) // prevent duplicate likes
}

model AcademicResource {
  id           String   @id @default(uuid())
  title        String
  description  String
  course       String
  unitName     String
  semester     String
  year         String
  institution  String
  fileUrl      String? 
  downloadCount Int      @default(0)   // Optional file upload
  uploadedAt   DateTime @default(now())
  uploader     Profile  @relation(fields: [uploaderId], references: [id])
  uploaderId   String

  flags AcademicResourceFlag[]
  activityLogs ResourceActivityLog[]
  isApproved     Boolean   @default(false)
  approvedAt     DateTime?
  approvedBy     String?
  isDeleted   Boolean  @default(false)
  deletedAt   DateTime?
}

model AcademicResourceFlag {
  id           String     @id @default(cuid())
  resourceId   String
  reporterId   String
  reviewedById String?
  reason       String
  status       FlagStatus @default(PENDING)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relations
  resource   AcademicResource @relation(fields: [resourceId], references: [id])
  reporter   User  @relation("AcademicResourceFlagsReported", fields: [reporterId], references: [id])
  reviewedBy User? @relation("AcademicResourceFlagsReviewed", fields: [reviewedById], references: [id])

  @@index([resourceId])
  @@index([reporterId])
  @@index([reviewedById])
}

model ResourceActivityLog {
  id          String   @id @default(uuid())
  resourceId  String
  userId      String?
  action      ResourceAction
  details     String?   // optional metadata (reason, status, etc.)
  createdAt   DateTime @default(now())

  // Relations
  resource AcademicResource @relation(fields: [resourceId], references: [id])
  user     User?            @relation(fields: [userId], references: [id])

  @@index([resourceId])
  @@index([userId])
}


model Tag {
  id      String @id  @default(uuid())
  name    String  @unique
  posts   PostTag[]
}

model PostTag {
  postId String
  tagId  String

  post   Post @relation(fields: [postId], references: [id])
  tag    Tag  @relation(fields: [tagId], references: [id])

  @@id([postId, tagId])
}


model Group {
  id          String       @id @default(uuid())
  name        String
  description String?
  coverImage  String?
  visibility  GroupVisibility @default(PUBLIC)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  creatorId String
  creator   User          @relation("GroupCreator", fields: [creatorId], references: [id])
  members   GroupMember[]
  messages  GroupMessage[]
  resources GroupResource[]
}

model GroupMember {
  id        String     @id @default(uuid())
  groupId   String
  userId    String
  role      GroupRole  @default(MEMBER)
  joinedAt  DateTime   @default(now())

  // Relations
  group Group @relation(fields: [groupId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  isDeleted Boolean    @default(false)
  deletedAt DateTime?

  @@unique([groupId, userId]) // prevent duplicate membership
}

model GroupMessage {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())

  groupId String
  userId  String

  group   Group @relation(fields: [groupId], references: [id])
  user    User  @relation(fields: [userId], references: [id])
}

model GroupResource {
  id         String   @id @default(uuid())
  title      String
  resourceUrl String
  createdAt  DateTime @default(now())

  groupId    String
  sharedById String

  group      Group @relation(fields: [groupId], references: [id])
  sharedBy   User  @relation(fields: [sharedById], references: [id])
}


model Conversation {
  id            String                     @id @default(uuid())
  title         String?                    // optional for group convs
  isGroup       Boolean                    @default(false)
  oneOnOneKey   String?                    @unique // deterministic key for 1:1 (sorted ids)
  createdAt     DateTime                   @default(now())
  updatedAt     DateTime                   @updatedAt

  participants  ConversationParticipant[]
  messages      ConversationMessage[]
}

model ConversationParticipant {
  id             String       @id @default(uuid())
  conversationId String
  userId         String
  lastReadAt     DateTime?    // used to compute unread counts
  createdAt      DateTime     @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@unique([conversationId, userId])
  @@index([userId])
  @@index([conversationId])
}

model ConversationMessage {
  id             String    @id @default(uuid())
  conversationId String
  senderId       String
  content        String?
  attachments    Json?     // array of { url, type } or whatever you want
  createdAt      DateTime  @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id])
  sender       User         @relation(fields: [senderId], references: [id])

  @@index([conversationId, createdAt])
}



enum GroupRole {
  OWNER
  ADMIN
  MEMBER
}

enum GroupVisibility {
  PUBLIC
  PRIVATE
}


enum interactionType {
  LIKE
  COMMENT
  VIEW
}

// enum for flag status
enum FlagStatus {
  PENDING
  REVIEWED
  RESOLVED
}

enum UserRole {
  ADMIN
  STUDENT
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum Visibility {
  PUBLIC
  STUDENTS_ONLY
  PRIVATE
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  CLOSED
}

enum PostType {
  GENERAL
  ACADEMIC
  OPPORTUNITY
  RESOURCE
}

enum ResourceAction {
  CREATE
  UPDATE
  DELETE_SOFT
  DELETE_HARD
  RESTORE
  FLAG
  FLAG_REVIEWED
  APPROVE
  UNPUBLISH
}
